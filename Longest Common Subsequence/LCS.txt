/* LCS(Lowest Common Subsequence) */
/* https://www.geeksforgeeks.org/longest-common-subsequence-dp-4/ */

/* Method 1 : Recursion (TC : 2^(m+n))*/
#include<bits/stdc++.h>
using namespace std;

int LCS(string s1, int l1, string s2, int l2){
    if(l1==0 || l2==0)
    return 0;
    
    if(s1[l1-1]==s2[l2-1])
    return 1+LCS(s1, l1-1, s2, l2-1);
    else
    return max(LCS(s1, l1-1, s2, l2), LCS(s1, l1, s2, l2-1));
}

int main()
{
    cout<<"Enter first string (X) : ";
    string X;
    cin>>X;
    cout<<"Enter second string (Y) : ";
    string Y;
    cin>>Y;
   
    int lcsLength=0;
    lcsLength=LCS(X, X.length(), Y, Y.length());
    cout<<"Length of Longest Common Subsequence is : "<<lcsLength<<endl;
    return 0;
}




/* Method 2 : DP (TC : m*n)*/
#include<bits/stdc++.h>
using namespace std;

int LCS(string s1, int len1, string s2, int len2) {
    int dp[len1+1][len2+1];
        
    for(int i=0 ; i<=len1 ; i++){
        for(int j=0 ; j<=len2 ; j++){
            dp[i][j]=0;
                
            if(i==0 || j==0)
                dp[i][j]=0;
            else{
                if(s1[i-1]==s2[j-1])
                    dp[i][j]=1+dp[i-1][j-1];
                else
                    dp[i][j]=max(dp[i-1][j], dp[i][j-1]);
            }
        }
    }
        
    return dp[len1][len2];
}

int main()
{
    cout<<"Enter first string (X) : ";
    string X;
    cin>>X;
    cout<<"Enter second string (Y) : ";
    string Y;
    cin>>Y;
   
    int lcsLength=0;
    lcsLength=LCS(X, X.length(), Y, Y.length());
    cout<<"Length of Longest Common Subsequence is : "<<lcsLength<<endl;
    return 0;
}